// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

package calendarpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CalendarEvent struct {
	Id                   uint32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description          string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CalendarEvent) Reset()         { *m = CalendarEvent{} }
func (m *CalendarEvent) String() string { return proto.CompactTextString(m) }
func (*CalendarEvent) ProtoMessage()    {}
func (*CalendarEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{0}
}

func (m *CalendarEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalendarEvent.Unmarshal(m, b)
}
func (m *CalendarEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalendarEvent.Marshal(b, m, deterministic)
}
func (m *CalendarEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarEvent.Merge(m, src)
}
func (m *CalendarEvent) XXX_Size() int {
	return xxx_messageInfo_CalendarEvent.Size(m)
}
func (m *CalendarEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarEvent proto.InternalMessageInfo

func (m *CalendarEvent) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CalendarEvent) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *CalendarEvent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CalendarEvent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type DateInterval struct {
	From                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   *timestamp.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DateInterval) Reset()         { *m = DateInterval{} }
func (m *DateInterval) String() string { return proto.CompactTextString(m) }
func (*DateInterval) ProtoMessage()    {}
func (*DateInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{1}
}

func (m *DateInterval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DateInterval.Unmarshal(m, b)
}
func (m *DateInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DateInterval.Marshal(b, m, deterministic)
}
func (m *DateInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DateInterval.Merge(m, src)
}
func (m *DateInterval) XXX_Size() int {
	return xxx_messageInfo_DateInterval.Size(m)
}
func (m *DateInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_DateInterval.DiscardUnknown(m)
}

var xxx_messageInfo_DateInterval proto.InternalMessageInfo

func (m *DateInterval) GetFrom() *timestamp.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *DateInterval) GetTo() *timestamp.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type CalendarEvents struct {
	Events               []*CalendarEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CalendarEvents) Reset()         { *m = CalendarEvents{} }
func (m *CalendarEvents) String() string { return proto.CompactTextString(m) }
func (*CalendarEvents) ProtoMessage()    {}
func (*CalendarEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{2}
}

func (m *CalendarEvents) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalendarEvents.Unmarshal(m, b)
}
func (m *CalendarEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalendarEvents.Marshal(b, m, deterministic)
}
func (m *CalendarEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarEvents.Merge(m, src)
}
func (m *CalendarEvents) XXX_Size() int {
	return xxx_messageInfo_CalendarEvents.Size(m)
}
func (m *CalendarEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarEvents.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarEvents proto.InternalMessageInfo

func (m *CalendarEvents) GetEvents() []*CalendarEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type CalendarEventId struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CalendarEventId) Reset()         { *m = CalendarEventId{} }
func (m *CalendarEventId) String() string { return proto.CompactTextString(m) }
func (*CalendarEventId) ProtoMessage()    {}
func (*CalendarEventId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d25d49f056cdb2, []int{3}
}

func (m *CalendarEventId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CalendarEventId.Unmarshal(m, b)
}
func (m *CalendarEventId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CalendarEventId.Marshal(b, m, deterministic)
}
func (m *CalendarEventId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CalendarEventId.Merge(m, src)
}
func (m *CalendarEventId) XXX_Size() int {
	return xxx_messageInfo_CalendarEventId.Size(m)
}
func (m *CalendarEventId) XXX_DiscardUnknown() {
	xxx_messageInfo_CalendarEventId.DiscardUnknown(m)
}

var xxx_messageInfo_CalendarEventId proto.InternalMessageInfo

func (m *CalendarEventId) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*CalendarEvent)(nil), "calendar.CalendarEvent")
	proto.RegisterType((*DateInterval)(nil), "calendar.DateInterval")
	proto.RegisterType((*CalendarEvents)(nil), "calendar.CalendarEvents")
	proto.RegisterType((*CalendarEventId)(nil), "calendar.CalendarEventId")
}

func init() {
	proto.RegisterFile("calendar.proto", fileDescriptor_e3d25d49f056cdb2)
}

var fileDescriptor_e3d25d49f056cdb2 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x41, 0x4f, 0xfa, 0x40,
	0x10, 0xc5, 0xd3, 0xc2, 0x9f, 0xc0, 0x14, 0xf8, 0x27, 0x1b, 0x83, 0xb5, 0x1e, 0xac, 0x3d, 0x35,
	0x1e, 0x4a, 0x82, 0x67, 0x89, 0x08, 0xc4, 0x70, 0x6d, 0x3c, 0x79, 0x5b, 0xd8, 0x01, 0x6b, 0xda,
	0x6e, 0xd3, 0x8e, 0x24, 0x7e, 0x02, 0x0f, 0x7e, 0x69, 0xc3, 0x2e, 0x55, 0x8a, 0x69, 0xf0, 0xb6,
	0xbb, 0xef, 0xb7, 0x6f, 0x66, 0xde, 0x40, 0x7f, 0xc5, 0x63, 0x4c, 0x05, 0xcf, 0x83, 0x2c, 0x97,
	0x24, 0x59, 0xbb, 0xbc, 0x3b, 0x57, 0x1b, 0x29, 0x37, 0x31, 0x0e, 0xd5, 0xfb, 0xf2, 0x6d, 0x3d,
	0xa4, 0x28, 0xc1, 0x82, 0x78, 0x92, 0x69, 0xd4, 0xb9, 0x3c, 0x06, 0x30, 0xc9, 0xe8, 0x5d, 0x8b,
	0xde, 0x87, 0x01, 0xbd, 0xe9, 0xde, 0x6a, 0xbe, 0xc5, 0x94, 0x58, 0x1f, 0xcc, 0x48, 0xd8, 0x86,
	0x6b, 0xf8, 0xbd, 0xd0, 0x8c, 0x04, 0x0b, 0xa0, 0x29, 0x38, 0xa1, 0x6d, 0xba, 0x86, 0x6f, 0x8d,
	0x9c, 0x40, 0xbb, 0x05, 0xa5, 0x5b, 0xf0, 0x54, 0x96, 0x0b, 0x15, 0xc7, 0xce, 0xe0, 0x1f, 0x45,
	0x14, 0xa3, 0xdd, 0x70, 0x0d, 0xbf, 0x13, 0xea, 0x0b, 0x73, 0xc1, 0x12, 0x58, 0xac, 0xf2, 0x28,
	0xa3, 0x48, 0xa6, 0x76, 0x53, 0x69, 0x87, 0x4f, 0xde, 0x2b, 0x74, 0x67, 0x9c, 0x70, 0x91, 0x12,
	0xe6, 0x5b, 0x1e, 0xef, 0xea, 0xae, 0x73, 0x99, 0xa8, 0x4e, 0x4e, 0xd4, 0xdd, 0x71, 0xec, 0x06,
	0x4c, 0x92, 0x7f, 0xe8, 0xd2, 0x24, 0xe9, 0x4d, 0xa0, 0x5f, 0x19, 0xba, 0x60, 0x43, 0x68, 0xa1,
	0x3a, 0xd9, 0x86, 0xdb, 0xf0, 0xad, 0xd1, 0x79, 0xf0, 0x1d, 0x78, 0x85, 0x0c, 0xf7, 0x98, 0x77,
	0x0d, 0xff, 0x2b, 0xc2, 0x42, 0x1c, 0x27, 0x37, 0xfa, 0x34, 0xa1, 0x5d, 0x32, 0x6c, 0x0c, 0xed,
	0x89, 0x10, 0x3a, 0xe2, 0x3a, 0x73, 0xe7, 0xa2, 0x46, 0x58, 0x08, 0x76, 0x0f, 0xd6, 0x0c, 0x63,
	0x24, 0xd4, 0x16, 0xf5, 0xa4, 0x33, 0xf8, 0x35, 0xfc, 0x7c, 0xb7, 0x70, 0x36, 0x06, 0x6b, 0xfa,
	0xc2, 0xd3, 0x0d, 0x9e, 0x68, 0xa2, 0xee, 0xff, 0x1d, 0x74, 0x1e, 0x91, 0xf6, 0x79, 0x0d, 0x7e,
	0x7e, 0x1f, 0x6e, 0xcd, 0xb1, 0x6b, 0x5c, 0x8b, 0x87, 0xee, 0x33, 0x94, 0x52, 0xb6, 0x5c, 0xb6,
	0x94, 0xf9, 0xed, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xec, 0x66, 0x42, 0x78, 0xd8, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalendarClient is the client API for Calendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalendarClient interface {
	AddEvent(ctx context.Context, in *CalendarEvent, opts ...grpc.CallOption) (*CalendarEventId, error)
	DeleteEvent(ctx context.Context, in *CalendarEventId, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangeEvent(ctx context.Context, in *CalendarEvent, opts ...grpc.CallOption) (*empty.Empty, error)
	GetEvents(ctx context.Context, in *DateInterval, opts ...grpc.CallOption) (*CalendarEvents, error)
}

type calendarClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarClient(cc grpc.ClientConnInterface) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) AddEvent(ctx context.Context, in *CalendarEvent, opts ...grpc.CallOption) (*CalendarEventId, error) {
	out := new(CalendarEventId)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/AddEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) DeleteEvent(ctx context.Context, in *CalendarEventId, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) ChangeEvent(ctx context.Context, in *CalendarEvent, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/ChangeEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarClient) GetEvents(ctx context.Context, in *DateInterval, opts ...grpc.CallOption) (*CalendarEvents, error) {
	out := new(CalendarEvents)
	err := c.cc.Invoke(ctx, "/calendar.Calendar/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarServer is the server API for Calendar service.
type CalendarServer interface {
	AddEvent(context.Context, *CalendarEvent) (*CalendarEventId, error)
	DeleteEvent(context.Context, *CalendarEventId) (*empty.Empty, error)
	ChangeEvent(context.Context, *CalendarEvent) (*empty.Empty, error)
	GetEvents(context.Context, *DateInterval) (*CalendarEvents, error)
}

// UnimplementedCalendarServer can be embedded to have forward compatible implementations.
type UnimplementedCalendarServer struct {
}

func (*UnimplementedCalendarServer) AddEvent(ctx context.Context, req *CalendarEvent) (*CalendarEventId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvent not implemented")
}
func (*UnimplementedCalendarServer) DeleteEvent(ctx context.Context, req *CalendarEventId) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (*UnimplementedCalendarServer) ChangeEvent(ctx context.Context, req *CalendarEvent) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEvent not implemented")
}
func (*UnimplementedCalendarServer) GetEvents(ctx context.Context, req *DateInterval) (*CalendarEvents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}

func RegisterCalendarServer(s *grpc.Server, srv CalendarServer) {
	s.RegisterService(&_Calendar_serviceDesc, srv)
}

func _Calendar_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/AddEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).AddEvent(ctx, req.(*CalendarEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarEventId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).DeleteEvent(ctx, req.(*CalendarEventId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_ChangeEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).ChangeEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/ChangeEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).ChangeEvent(ctx, req.(*CalendarEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendar_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DateInterval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetEvents(ctx, req.(*DateInterval))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calendar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEvent",
			Handler:    _Calendar_AddEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _Calendar_DeleteEvent_Handler,
		},
		{
			MethodName: "ChangeEvent",
			Handler:    _Calendar_ChangeEvent_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _Calendar_GetEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}
